# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ChartRepositoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def chartrepo_charts_post(self, chart, **kwargs):  # noqa: E501
        """Upload a chart file to the defult 'library' project.  # noqa: E501

        Upload a chart file to the default 'library' project. Uploading together with the prov file at the same time is also supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_charts_post(chart, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file chart: The chart file (required)
        :param file prov: The provance file
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_charts_post_with_http_info(chart, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_charts_post_with_http_info(chart, **kwargs)  # noqa: E501
            return data

    def chartrepo_charts_post_with_http_info(self, chart, **kwargs):  # noqa: E501
        """Upload a chart file to the defult 'library' project.  # noqa: E501

        Upload a chart file to the default 'library' project. Uploading together with the prov file at the same time is also supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_charts_post_with_http_info(chart, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file chart: The chart file (required)
        :param file prov: The provance file
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chart', 'prov']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_charts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chart' is set
        if ('chart' not in params or
                params['chart'] is None):
            raise ValueError("Missing the required parameter `chart` when calling `chartrepo_charts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'chart' in params:
            local_var_files['chart'] = params['chart']  # noqa: E501
        if 'prov' in params:
            local_var_files['prov'] = params['prov']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/charts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_health_get(self, **kwargs):  # noqa: E501
        """Check the health of chart repository service.  # noqa: E501

        Check the health of chart repository service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_health_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_health_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_health_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def chartrepo_health_get_with_http_info(self, **kwargs):  # noqa: E501
        """Check the health of chart repository service.  # noqa: E501

        Check the health of chart repository service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_health_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_health_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_get(self, repo, **kwargs):  # noqa: E501
        """Get all the charts under the specified project  # noqa: E501

        Get all the charts under the specified project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_get(repo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :return: list[ChartInfoEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_get_with_http_info(repo, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_get_with_http_info(repo, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_get_with_http_info(self, repo, **kwargs):  # noqa: E501
        """Get all the charts under the specified project  # noqa: E501

        Get all the charts under the specified project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_get_with_http_info(repo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :return: list[ChartInfoEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChartInfoEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_name_delete(self, repo, name, **kwargs):  # noqa: E501
        """Delete all the versions of the specified chart  # noqa: E501

        Delete all the versions of the specified chart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_delete(repo, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_name_delete_with_http_info(repo, name, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_name_delete_with_http_info(repo, name, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_name_delete_with_http_info(self, repo, name, **kwargs):  # noqa: E501
        """Delete all the versions of the specified chart  # noqa: E501

        Delete all the versions of the specified chart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_delete_with_http_info(repo, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_name_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `chartrepo_repo_charts_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_name_get(self, repo, name, **kwargs):  # noqa: E501
        """Get all the versions of the specified chart  # noqa: E501

        Get all the versions of the specified chart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_get(repo, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_name_get_with_http_info(repo, name, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_name_get_with_http_info(repo, name, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_name_get_with_http_info(self, repo, name, **kwargs):  # noqa: E501
        """Get all the versions of the specified chart  # noqa: E501

        Get all the versions of the specified chart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_get_with_http_info(repo, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_name_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `chartrepo_repo_charts_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_name_version_delete(self, repo, name, version, **kwargs):  # noqa: E501
        """Delete the specified chart version  # noqa: E501

        Delete the specified chart version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_delete(repo, name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_name_version_delete_with_http_info(repo, name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_name_version_delete_with_http_info(repo, name, version, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_name_version_delete_with_http_info(self, repo, name, version, **kwargs):  # noqa: E501
        """Delete the specified chart version  # noqa: E501

        Delete the specified chart version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_delete_with_http_info(repo, name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_name_version_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_name_version_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `chartrepo_repo_charts_name_version_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `chartrepo_repo_charts_name_version_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts/{name}/{version}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_name_version_get(self, repo, name, version, **kwargs):  # noqa: E501
        """Get the specified chart version  # noqa: E501

        Get the specified chart version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_get(repo, name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_name_version_get_with_http_info(repo, name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_name_version_get_with_http_info(repo, name, version, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_name_version_get_with_http_info(self, repo, name, version, **kwargs):  # noqa: E501
        """Get the specified chart version  # noqa: E501

        Get the specified chart version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_get_with_http_info(repo, name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_name_version_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_name_version_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `chartrepo_repo_charts_name_version_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `chartrepo_repo_charts_name_version_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts/{name}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_name_version_labels_get(self, repo, name, version, **kwargs):  # noqa: E501
        """Return the attahced labels of chart.  # noqa: E501

        Return the attahced labels of the specified chart version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_labels_get(repo, name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_name_version_labels_get_with_http_info(repo, name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_name_version_labels_get_with_http_info(repo, name, version, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_name_version_labels_get_with_http_info(self, repo, name, version, **kwargs):  # noqa: E501
        """Return the attahced labels of chart.  # noqa: E501

        Return the attahced labels of the specified chart version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_labels_get_with_http_info(repo, name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_name_version_labels_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_name_version_labels_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `chartrepo_repo_charts_name_version_labels_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `chartrepo_repo_charts_name_version_labels_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts/{name}/{version}/labels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_name_version_labels_id_delete(self, repo, name, version, id, **kwargs):  # noqa: E501
        """Remove label from chart.  # noqa: E501

        Remove label from the specified chart version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_labels_id_delete(repo, name, version, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :param int id: The label ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_name_version_labels_id_delete_with_http_info(repo, name, version, id, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_name_version_labels_id_delete_with_http_info(repo, name, version, id, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_name_version_labels_id_delete_with_http_info(self, repo, name, version, id, **kwargs):  # noqa: E501
        """Remove label from chart.  # noqa: E501

        Remove label from the specified chart version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_labels_id_delete_with_http_info(repo, name, version, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :param int id: The label ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'name', 'version', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_name_version_labels_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_name_version_labels_id_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `chartrepo_repo_charts_name_version_labels_id_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `chartrepo_repo_charts_name_version_labels_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `chartrepo_repo_charts_name_version_labels_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts/{name}/{version}/labels/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_name_version_labels_post(self, repo, name, version, label, **kwargs):  # noqa: E501
        """Mark label to chart.  # noqa: E501

        Mark label to the specified chart version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_labels_post(repo, name, version, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :param Label label: The label being marked to the chart version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_name_version_labels_post_with_http_info(repo, name, version, label, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_name_version_labels_post_with_http_info(repo, name, version, label, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_name_version_labels_post_with_http_info(self, repo, name, version, label, **kwargs):  # noqa: E501
        """Mark label to chart.  # noqa: E501

        Mark label to the specified chart version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_name_version_labels_post_with_http_info(repo, name, version, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param str name: The chart name (required)
        :param str version: The chart version (required)
        :param Label label: The label being marked to the chart version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'name', 'version', 'label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_name_version_labels_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_name_version_labels_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `chartrepo_repo_charts_name_version_labels_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `chartrepo_repo_charts_name_version_labels_post`")  # noqa: E501
        # verify the required parameter 'label' is set
        if ('label' not in params or
                params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `chartrepo_repo_charts_name_version_labels_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'label' in params:
            body_params = params['label']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts/{name}/{version}/labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_charts_post(self, repo, chart, **kwargs):  # noqa: E501
        """Upload a chart file to the specified project.  # noqa: E501

        Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_post(repo, chart, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param file chart: The chart file (required)
        :param file prov: The provance file
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_charts_post_with_http_info(repo, chart, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_charts_post_with_http_info(repo, chart, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_charts_post_with_http_info(self, repo, chart, **kwargs):  # noqa: E501
        """Upload a chart file to the specified project.  # noqa: E501

        Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_charts_post_with_http_info(repo, chart, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param file chart: The chart file (required)
        :param file prov: The provance file
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'chart', 'prov']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_charts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_charts_post`")  # noqa: E501
        # verify the required parameter 'chart' is set
        if ('chart' not in params or
                params['chart'] is None):
            raise ValueError("Missing the required parameter `chart` when calling `chartrepo_repo_charts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'chart' in params:
            local_var_files['chart'] = params['chart']  # noqa: E501
        if 'prov' in params:
            local_var_files['prov'] = params['prov']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/charts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chartrepo_repo_prov_post(self, repo, prov, **kwargs):  # noqa: E501
        """Upload a provance file to the specified project.  # noqa: E501

        Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_prov_post(repo, prov, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param file prov: The provance file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chartrepo_repo_prov_post_with_http_info(repo, prov, **kwargs)  # noqa: E501
        else:
            (data) = self.chartrepo_repo_prov_post_with_http_info(repo, prov, **kwargs)  # noqa: E501
            return data

    def chartrepo_repo_prov_post_with_http_info(self, repo, prov, **kwargs):  # noqa: E501
        """Upload a provance file to the specified project.  # noqa: E501

        Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chartrepo_repo_prov_post_with_http_info(repo, prov, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo: The project name (required)
        :param file prov: The provance file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo', 'prov']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chartrepo_repo_prov_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `chartrepo_repo_prov_post`")  # noqa: E501
        # verify the required parameter 'prov' is set
        if ('prov' not in params or
                params['prov'] is None):
            raise ValueError("Missing the required parameter `prov` when calling `chartrepo_repo_prov_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'prov' in params:
            local_var_files['prov'] = params['prov']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chartrepo/{repo}/prov', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
